{"version":3,"sources":["service/navbar.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAMA;gBAII,uBAAoB,MAAc;oBAJtC,iBAmCC;oBA/BuB,WAAM,GAAN,MAAM,CAAQ;oBAH1B,WAAM,GAAG,IAAI,iBAAO,EAAO,CAAC;oBAC5B,8BAAyB,GAAG,KAAK,CAAC;oBAGtC,sCAAsC;oBACtC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,KAAK;wBACzB,EAAE,CAAC,CAAC,KAAK,YAAY,wBAAe,CAAC,CAAC,CAAC;4BACnC,EAAE,CAAC,CAAC,KAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;gCACjC,yCAAyC;gCACzC,KAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;4BAC3C,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,cAAc;gCACd,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;4BACvB,CAAC;wBACL,CAAC;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,kCAAU,GAAV;oBACI,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;oBACtC,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;oBAClE,EAAE,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;wBACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;oBACpE,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;oBACvD,CAAC;gBACL,CAAC;gBAED,iCAAS,GAAT;oBACI,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;oBACnB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACnB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACzB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;gBACtC,CAAC;gBAnCL;oBAAC,iBAAU,EAAE;;iCAAA;gBAoCb,oBAAC;YAAD,CAnCA,AAmCC,IAAA;YAnCD,yCAmCC,CAAA","file":"service/navbar.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs/Subject';\n \n@Injectable()\nexport class NavbarService {\n    private status = new Subject<any>();\n    private keepAfterNavigationChange = false;\n \n    constructor(private router: Router) {\n        // clear alert message on route change\n        router.events.subscribe(event => {\n            if (event instanceof NavigationStart) {\n                if (this.keepAfterNavigationChange) {\n                    // only keep for a single location change\n                    this.keepAfterNavigationChange = false;\n                } else {\n                    // clear alert\n                    this.status.next();\n                }\n            }\n        });\n    }\n \n    checklogin() {\n        this.keepAfterNavigationChange = true;\n        let currentUser = JSON.parse(localStorage.getItem('currentUser'));\n        if (currentUser && currentUser.api_token) {\n            this.status.next({ username: currentUser.name, islogin: true });\n        } else {\n            this.status.next({ username: '', islogin: false });\n        }\n    }\n \n    getStatus(): Observable<any> {\n        this.status.next();\n        console.log(\"day\");\n        console.log(this.status);\n        return this.status.asObservable();\n    }\n}"],"sourceRoot":"/source/"}