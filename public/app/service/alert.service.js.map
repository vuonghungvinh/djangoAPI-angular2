{"version":3,"sources":["service/alert.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAMA;gBAII,sBAAoB,MAAc;oBAJtC,iBAgCC;oBA5BuB,WAAM,GAAN,MAAM,CAAQ;oBAH1B,YAAO,GAAG,IAAI,iBAAO,EAAO,CAAC;oBAC7B,8BAAyB,GAAG,KAAK,CAAC;oBAItC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,KAAK;wBACzB,EAAE,CAAC,CAAC,KAAK,YAAY,wBAAe,CAAC,CAAC,CAAC;4BACnC,EAAE,CAAC,CAAC,KAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;gCAEjC,KAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;4BAC3C,CAAC;4BAAC,IAAI,CAAC,CAAC;gCAEJ,KAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;4BACxB,CAAC;wBACL,CAAC;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,8BAAO,GAAP,UAAQ,OAAe,EAAE,yBAAiC;oBAAjC,yCAAiC,GAAjC,iCAAiC;oBACtD,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;oBAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;gBAC1D,CAAC;gBAED,4BAAK,GAAL,UAAM,OAAe,EAAE,yBAAiC;oBAAjC,yCAAiC,GAAjC,iCAAiC;oBACpD,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;oBAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;gBACxD,CAAC;gBAED,iCAAU,GAAV;oBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;gBACvC,CAAC;gBAhCL;oBAAC,iBAAU,EAAE;;gCAAA;gBAiCb,mBAAC;YAAD,CAhCA,AAgCC,IAAA;YAhCD,uCAgCC,CAAA","file":"service/alert.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs/Subject';\n \n@Injectable()\nexport class AlertService {\n    private subject = new Subject<any>();\n    private keepAfterNavigationChange = false;\n \n    constructor(private router: Router) {\n        // clear alert message on route change\n        router.events.subscribe(event => {\n            if (event instanceof NavigationStart) {\n                if (this.keepAfterNavigationChange) {\n                    // only keep for a single location change\n                    this.keepAfterNavigationChange = false;\n                } else {\n                    // clear alert\n                    this.subject.next();\n                }\n            }\n        });\n    }\n \n    success(message: string, keepAfterNavigationChange = false) {\n        this.keepAfterNavigationChange = keepAfterNavigationChange;\n        this.subject.next({ type: 'success', text: message });\n    }\n \n    error(message: string, keepAfterNavigationChange = false) {\n        this.keepAfterNavigationChange = keepAfterNavigationChange;\n        this.subject.next({ type: 'error', text: message });\n    }\n \n    getMessage(): Observable<any> {\n        return this.subject.asObservable();\n    }\n}"],"sourceRoot":"/source/"}